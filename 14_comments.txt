3.1

= 1 ===========================================================================
# all missing derivatives in b are assumed to be zero
for t in range(0, min(deriv + 1, len(b))):
    ...


= 2 ===========================================================================
if len(b) > 0:
    # calculate the t-th derivative of mxY @ b
    # except the term with the t-th derivative of b
    right_part += _derivMatMul(mxY, lj, b, deriv=t)
----------------------------------------


= 3 ===========================================================================
# extend self.coefs if needed
if value.npow > self.npow:
    ...
----------------------------------------


= 4 ===========================================================================
if x.ndim == 0:
    # broadcast scalar polynomial over all dimensions of self
    x = ArrayPoly(x.coefs[_it((), self.ndim)])
----------------------------------------


= 5 ===========================================================================
# multiply by inverse diagonal part of local normal Smith form
for column in range(size):
    left_matrix[:, column] //= factor_powers[diag_factor_exponents[column]]
----------------------------------------


= 6 ===========================================================================
# move rows and cols dimensions to the end
# and reshape them to get plain square submatrices matrices
head = [d for d in a.dims if d not in rows and d not in cols]
headShape = tuple(a.sizes[d] for d in head)
rowsShape = tuple(a.sizes[d] for d in rows)
colsShape = tuple(a.sizes[d] for d in cols)
dim = np.prod([a.sizes[d] for d in rows])
# make sure the submatrices are square
assert(np.prod([a.sizes[d] for d in cols]) == dim)
aData = a \
    .transpose(*head, *rows, *cols) \
    .data \
    .reshape(headShape + (dim, dim))
----------------------------------------


= 7 ===========================================================================
# inverse the submatrices and then split their dimesions
# finally reorder their dimensions to fit their order in the source array
b = xr.DataArray(
        np.linalg.inv(aData) \
            .reshape(headShape + colsShape + rowsShape),
        dims=(head + cols + rows)) \
    .transpose(*a.dims)
----------------------------------------


3.2

= 1 ===========================================================================
----------------------------------------


= 2 ===========================================================================
----------------------------------------


= 3 ===========================================================================
----------------------------------------


= 4 ===========================================================================
----------------------------------------


= 5 ===========================================================================
----------------------------------------
